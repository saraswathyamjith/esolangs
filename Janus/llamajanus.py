# -*- coding: utf-8 -*-
"""LLAMAJanus.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FUmffOxi4dWpx0hnRPD9FSM-ocQ5qItn
"""

# Install GHC and Cabal
!sudo apt update
!sudo apt install -y ghc cabal-install

# Clone the Jana repository
!git clone https://github.com/mbudde/jana.git

# Commented out IPython magic to ensure Python compatibility.
# Change directory to Jana's root folder
# %cd jana

# Build Jana using Cabal
!cabal configure
!cabal build

# Install Jana
!cabal install

# Commented out IPython magic to ensure Python compatibility.
# Navigate to the src directory
# %cd src

# Run Jana using runhaskell
!runhaskell Main.hs

# Commented out IPython magic to ensure Python compatibility.
# Move to the src directory if not already there
# %cd /content/jana/src

# Run the Jana interpreter with the uploaded file
!runhaskell Main.hs /content/jana/examples/fib.ja

!pip install together

from together import Together

client = Together(api_key = 'your-api-key')





def generate_janus_code(prompt):
    """
    Generates Janus code for a given prompt using OpenAI's API.
    """
    response = client.chat.completions.create(
            model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
            messages=[
            {"role": "system", "content": "You are an assistant that writes Janus, the esolang, code."},
            {"role": "user", "content": mod_prompt(prompt)}
        ],
            temperature=0.0,  # Lower temperature for deterministic output
            max_tokens=500  # Adjust based on expected code length
        )

    raw_response = response.choices[0].message.content.strip()
    janus_code = extract_janus_code(raw_response)
    return janus_code

def run_janus_code(filepath, input_data):
    """
    Runs the Janus program using Jana and captures the output.
    """
    try:
        directory, filename = os.path.split(filepath)

        process = subprocess.run(
            ["runhaskell", "Main.hs", filename],
            input=input_data.encode(),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            cwd=directory
        )

        stdout = process.stdout.decode().strip()
        stderr = process.stderr.decode().strip()

        print(f"Process Return Code: {process.returncode}")
        print(f"Standard Output: {stdout}")
        print(f"Standard Error: {stderr}")

        if process.returncode != 0:
            return {"error": stderr}

        return {"output": stdout}

    except Exception as e:
        return {"error": str(e)}

def write_janus_code(task_id, code):
    """
    Writes Janus code to a file named after the task_id in the Jana src directory.
    """
    src_dir = "/content/jana/src"

    os.makedirs(src_dir, exist_ok=True)

    filename = f"task_{task_id}.ja"
    filepath = os.path.join(src_dir, filename)

    with open(filepath, "w") as file:
        file.write(code)

    return filepath

def validate_output(actual, expected):
    """
    Compares the actual output with the expected output.
    """
    actual = actual.strip('"').strip("'")
    expected = expected.strip('"').strip("'")

    if not actual and expected:
        return False

    return actual == expected

def extract_janus_code(response_text):
    """
    Extracts Janus code from the API response by removing markdown code blocks and explanations.

    Args:
        response_text (str): The raw response text from the OpenAI API.

    Returns:
        str: The extracted Janus code.
    """
    # Pattern to match code blocks with language specified as janus
    code_block_pattern = r"```janus\s*([\s\S]*?)\s*```"
    match = re.search(code_block_pattern, response_text, re.IGNORECASE)

    if match:
        return match.group(1).strip()
    else:
        return response_text.strip()



from google.colab import drive
drive.mount('/content/drive')

!pip install PyPDF2

from PyPDF2 import PdfReader
import os

file_path = '/content/drive/MyDrive/esolangs/janus/janus.pdf'
reader = PdfReader(file_path)

# Extract text from each page
text = ""
for page in reader.pages:
    text += page.extract_text()

examples_dir = '/content/jana/examples'
example_files_content = "\n\n# Example Janus Codes\n\n"

if os.path.exists(examples_dir):
    for file_name in os.listdir(examples_dir):
        if file_name.endswith('.ja'):
            file_path = os.path.join(examples_dir, file_name)
            try:
                with open(file_path, 'r') as example_file:
                    example_content = example_file.read()
                example_files_content += f"## {file_name}\n\n{example_content}\n\n"
            except Exception as e:
                example_files_content += f"## {file_name}\n\n[Error reading file: {e}]\n\n"
else:
    example_files_content += "[Error: Examples directory not found]\n"

# Combines PDF text and examples into singular documentation
documentation = text + example_files_content

output_path = "/content/janus_documentation_with_all_examples.txt"
with open(output_path, 'w') as output_file:
    output_file.write(documentation)

print(f"Documentation with all example code has been saved to {output_path}.")

def mod_prompt(prompt):
   modified_prompt = (
        f"Write a function in Janus, an esoteric programming language. "
        f"The function should perform the following: {prompt}"
        f"The documentation for Janus is provided here: '{documentation[:7000]}'. "

    )
   return modified_prompt

problems = [
    {
        'task_id': "1",
        'prompt': mod_prompt('print hello world'),
        "tests": ["", 'Hello world']
    },
    {
        'task_id': "2",
        'prompt': mod_prompt('given a number n input, return the nth factorial number'),
        "tests": ["5", "120"]
    },
    {
        'task_id': "3",
        'prompt': mod_prompt('given a number n, return "Even" if n is even, else "Odd"'),
        "tests": ["4", '"Even"']
    },
    {
        'task_id': "4",
        'prompt': mod_prompt('given two numbers a and b, return their sum'),
        "tests": ["2 \n 3", "5"]
    },
    {
        'task_id': "5",
        'prompt': mod_prompt('given a number n, return True if it is prime, else False'),
        "tests": ["11", "True"]
    },
    {
        'task_id': "6",
        'prompt': mod_prompt('given a string s, return the reversed string'),
        "tests": ["hello", '"olleh"']
    },
     {
        'task_id': "7",
        'prompt': mod_prompt('print "Hello, Pyth!"'),
        "tests": ["", '"Hello, Pyth!"']
    },
    {
        'task_id': "8",
        'prompt': mod_prompt('given two numbers a and b, return their product'),
        "tests": ["2 \n 3", "6"]
    },
    {
        'task_id': "9",
        'prompt': mod_prompt('given a number n, return True if it is positive, else False'),
        "tests": ["10", "True"]
    },
    {
        'task_id': "10",
        'prompt': mod_prompt('given two strings s1 and s2, return their concatenation'),
        "tests": ['"foo", "bar"', '"foobar"']
    },
    {
        'task_id': "11",
        'prompt': mod_prompt('given a number n, return its square'),
        "tests": ["4", "16"]
    },
    {
        'task_id': "12",
        'prompt': mod_prompt('given a string s, return the number of characters in the string'),
        "tests": ['"hello"', "5"]
    },
    {
        'task_id': "13",
        'prompt': mod_prompt('given two numbers a and b, return the smaller number'),
        "tests": ["3 \n 7", "3"]
    },
    {
        'task_id': "14",
        'prompt': mod_prompt('given a string s, return True if all characters in the string are vowels, else False'),
        "tests": ['"aeiou"', "True"]
    },
    {
        'task_id': "15",
        'prompt': mod_prompt('given two numbers a and b, return the absolute difference between them'),
        "tests": ["7 \n 3", "4"]
    },
    {
        'task_id': "16",
        'prompt': mod_prompt('given a string s and a number n, return the string repeated n times'),
        "tests": ['"abc", 3', '"abcabcabc"']
    }
    ,{
      'task_id': "17",
      'prompt': mod_prompt('given a number n, return the Fibonacci sequence up to the nth term'),
      "tests": ["5", "[0, 1, 1, 2, 3]"]
  },
  {
      'task_id': "18",
      'prompt': mod_prompt('given a list of numbers, return the maximum number'),
      "tests": ["[3, 1, 4, 1, 5, 9]", "9"]
  },
  {
      'task_id': "19",
      'prompt': mod_prompt('given a string s, return True if it is a palindrome, else False'),
      "tests": ['"racecar"', "True"]
  },
  {
      'task_id': "20",
      'prompt': mod_prompt('given two numbers a and b, return their greatest common divisor'),
      "tests": ["8 \n 12", "4"]
  },
  {
      'task_id': "21",
      'prompt': mod_prompt('given a list of numbers, return the list sorted in ascending order'),
      "tests": ["[4, 2, 5, 1]", "[1, 2, 4, 5]"]
  },
  {
      'task_id': "22",
      'prompt': mod_prompt('given a number n, return True if it is a perfect square, else False'),
      "tests": ["16", "True"]
  },
  {
      'task_id': "23",
      'prompt': mod_prompt('given a string s, return the number of vowels in the string'),
      "tests": ['"hello"', "2"]
  },
  {
      'task_id': "24",
      'prompt': mod_prompt('given a list of numbers, return the sum of all numbers in the list'),
      "tests": ["[1, 2, 3, 4]", "10"]
  },
  {
      'task_id': "25",
      'prompt': mod_prompt('given a number n, return its binary representation as a string'),
      "tests": ["10", '"1010"']
  },
  {
      'task_id': "26",
      'prompt': mod_prompt('given two strings s1 and s2, return True if s1 is an anagram of s2, else False'),
      "tests": ['"listen", "silent"', "True"]
  },
  {
      'task_id': "27",
      'prompt': mod_prompt('given a number n, return the sum of digits in n'),
      "tests": ["1234", "10"]
  },
  {
      'task_id': "28",
      'prompt': mod_prompt('given a list of numbers, return True if all numbers are even, else False'),
      "tests": ["[2, 4, 6, 8]", "True"]
  },
  {
      'task_id': "29",
      'prompt': mod_prompt('given a string s, return the string in title case'),
      "tests": ['"hello world"', '"Hello World"']
  },
  {
      'task_id': "30",
      'prompt': mod_prompt('given two numbers a and b, return True if a is divisible by b, else False'),
      "tests": ["10 \n 2", "True"]
  }

]

import subprocess
import os
import re

results = []

for problem in problems[:30]:
    task_id = problem['task_id']
    prompt = problem['prompt']
    tests = problem['tests']

    # Generate Janus Code
    janus_code = generate_janus_code(prompt)
    print(f"Generated Janus Code for Task {task_id}:\n{janus_code}\n")

    # Write Code to File
    filename = write_janus_code(task_id, janus_code)

    # Run Tests
    test_input = tests[0]
    expected_output = tests[1]

    # Run the Janus program with the test input
    test_result = run_janus_code(filename, test_input)

    print(f"Test Result for Task {task_id}: {test_result}")

    if 'error' in test_result:
        success = False
        actual_output = test_result['error']
    else:
        actual_output = test_result['output']
        success = validate_output(actual_output, expected_output)

    results.append({
        'task_id': task_id,
        'success': success,
        'expected': expected_output,
        'actual': actual_output
    })

    if success:
        print(f"Task {task_id} Passed ✅\n")
    else:
        print(f"Task {task_id} Failed ❌")
        print(f"Expected: {expected_output}")
        print(f"Actual: {actual_output}\n")

passed = sum(1 for result in results if result['success'])
total = len(results)
print(f"Summary: {passed}/{total} tasks passed.")