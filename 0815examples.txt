
Â¤0815

0815 - Language details

0815 is based around a queue and 3 registers. It understands hexadecimals only, so every numeric input and output are in hexadecimals. It also ignores everything that is not one of its instructions, for that matter: everything that is not an instruction is a comment.
Registers

0815 has 3 signed integers 64 bit wide registers: X, Y, and Z. All three are initialized with 0. X is a write only register and Z is a read only register. Y is a helper register and cannot be accessed by the programmer.
Parameters

Some of 0815 instructions need parameters. All parameters must be surrounded by colons, e.g. :3c:
Labels are also considered parameters; therefore they also need the surrounding colons.
If a parameter is needed but any is found the instruction will simply be ignored, no error message will be displayed.
Jumps

In 0815 you find 2 kinds of jumps: if Zero( # ) or if not Zero( ^ ). Jumps' labels can contain any character, except the language reserved symbols, e.g. :_loop: or :34:
If the label that the jump is pointed to is not found, the program terminates.
New lines

Either ASCII 10 or 13 will be interpreted as a new line.
Instructions

+-----------+---------+---------------------------------------------------------------------------+
|           |         |<:2: will move '2' to register X                                           |
|   move    |    <    |(parameter is mandatory)                                                   |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|           |         |swaps register X and Y                                                     |
|   swap    |    x    |                                                                           |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|           |         |}:_loop: this creates a label called '_loop'                               |
|   label   |    }    |(parameter is mandatory)                                                   |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|   input   |         |inputs a signed 64 bit integer and stores it into X                        |
|   number  |    |    |(hexadecimal base)                                                         |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|   input   |         |inputs an ASCII char and stores it into X                                  |
|   ASCII   |    !    |                                                                           |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|   print   |         |prints a signed 64 bit integer stored in Z                                 |
|   number  |    %    |(hexadecimal base)                                                         |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|   print   |         |prints an ASCII char stored in Z                                           |
|   ASCII   |    $    |                                                                           |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|   roll    |         |rolls all registers to the left: X <- Y <- Z                               |
| registers |    ~    |after roll: X = Y, Y = Z and Z = X                                         |
|   left    |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|   roll    |         |rolls all registers to the right: X -> Y -> Z                              |
| registers |    =    |after roll: X = Z, Y = X and Z = Y                                         |
|  right    |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|   jump    |         |^:_loop: jumps to label _loop if Z is not 0                                |
|   if not  |    ^    |(parameter is mandatory)                                                   |
|   zero    |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|   jump    |         |#:_loop: jumps to label _loop if Z is 0                                    |
|   if      |    #    |(parameter is mandatory)                                                   |
|   zero    |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
Queue instructions

+-----------+---------+---------------------------------------------------------------------------+
|           |         |clears the queue                                                           |
|  clear    |    ?    |                                                                           |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|           |         |enqueue the number stored in Z                                             |
|  enqueue  |    >    |                                                                           |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|           |         |dequeue a number and stores it into X                                      |
|  dequeue  |    {    |                                                                           |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|   roll    |         |rolls the queue to the left: the first value becomes the last, the second  |
|   queue   |    @    |will be first and so on. If no parameter is found, it will roll the queue  |
|   left    |         |once, otherwise rolls it parameter times. e.g. @:a: rolls the queue ten    |
|           |         |times to the left.                                                         |
+-----------+---------+---------------------------------------------------------------------------+
|  roll     |         |the same as '@' just that the roll will go to the right:                   |
|  queue    |    &    |the last will be the first, the first will be the second and so on.        |
|  right    |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
Arithmetic instructions

+-----------+---------+---------------------------------------------------------------------------+
|           |         |Z = X + Y                                                                  |
|   add     |    +    |                                                                           |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|           |         |Z = X - Y                                                                  |
|   sub     |    -    |                                                                           |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|           |         |Z = X * Y                                                                  |
| multipl.  |    *    |                                                                           |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
|           |         |Z = X / Y                                                                  |
| division  |    /    |Y = rest                                                                   |
|           |         |                                                                           |
+-----------+---------+---------------------------------------------------------------------------+
Interpreter

I re-wrote my Brainfuck interpreter to run 0815 programs. This version just runs (interprets) 0815 programs.
Probably, I'll write another version that can interpret both languages, but for now, this will do.
There is another issue that I should mention: In this version, the Queue will only show its first 2070 items.
0815 Interpreter

0815 Programming examples

Hello World!
Cat
Odd or Even
Binary representation of an integer
Factorial sequence (0 - 14h)
Arithmetic mean(averages)
Fibonacci sequence (0 - a94fad42221f2702h)
99 bottles of beer (63h bottles of beer)
Prime numbers
Hailstone sequence
Simple randomizer
Sum of squares
Truth machine - numeric
Truth machine - ASCII
 
Home | Esolang


--- Hello World Program ---

<:48:x<:65:=<:6C:$=$=$$~<:03:+$~<:ffffffffffffffbd:+$<:ffffffffffffffb1:
+$<:57:~$~<:18:x+$~<:03:+$~<:06:x-$x<:0e:x-$=x<:43:x-$


--- Cat Program ---

}:_t:!~$^:_t:


--- Odd Even Program ---

}:s:|=<:2:x~#:e:=/~%~<:20:~$=<:73:x<:69:~$~$~<:20:~$=^:o:<:65:
x<:76:=$=$~$<:6E:~$<:a:~$^:s:}:o:<:6F:x<:64:x~$~$$<:a:~$^:s:


--- Binary Program ---

|~}:z:=x<:2:x/=>&~^:z:
<:ffffffffffffffff:~>}:s:{x
<:ffffffffffffffff:
-#:out:=%~^:s:


--- Factorial Program ---

<:1:~%<:d:~$~>~}:s:><:1:x{+>~{*%
<:21C3677C82B40000:=-#:end:~<:d:~$=^:s:


--- Arithmetic Program ---

<:01:~><:02:~><:03:~><:04:~><:05:~><:06:~><:07:~><:08:~><:09:~>
<:0a:~><:0b:~><:0c:~><:0d:~><:0e:~><:0f:~><:10:~><:11:~><:12:~>
<:13:~><:14:~><:15:~><:16:~><:17:~><:18:~><:19:~><:ffffffffffffffff:~>
{x{+>}:8f:{&={+>{~>&=x<:ffffffffffffffff:/#:8f:{{=<:19:x/%


--- Fibonacci Program ---

%<:0D:>~$<:01:~%>=<:a94fad42221f2702:>~>}:_s:{x{={~$x+%{=>~>x~-x<:0D:~>~>~^:_s:?


--- Prime Program ---

<:2:~}:strt:>~}:net:<:1:x-~<:1:x-#:ok:x{=>=>=/=#:nP:{x
^:net:}:ok:{~%<:d:~$<:1:+^:strt:}:nP:{{x<:1:+^:strt:


--- Hailstone Program ---

|~}:s:%~<:1:-#:end:
<:d:~$~>{>x<:2:x/=
#:evn:{x<:3:*~<:1:+
^:s:}:evn:~{^:s:


--- Sum of Squares Program ---

{x{*%<:d:~$<:1:~>><:2:~>><:3:~>><:4:~>><:5:~>><:6:~>><:7:
~>><:8:~>><:9:~>><:a:~>><:b:~>><:c:~>><:ffffffffffffffff:
~>{x{*>}:8f:{x{*&{=+>{~>&=x<:ffffffffffffffff:/#:8f:{{~%


--- 99bb Program ---
<:63:x<:20:=<:62:>=>=><:6F:x<:74:=<:6C:>=>>=><:65:x<:73:=<:20:>=>=><:6F:x<:66:=<:20:>=>=>
<:62:x<:65:=<:72:>=>>=><:20:x<:6F:=<:6E:>=>=><:20:x<:74:=<:68:>=>=><:65:x<:20:=<:77:>=>=>
<:61:x<:6C:=>=>><:54:x<:61:=<:6B:>=>=><:65:x<:20:=<:6F:>=>=><:6E:x<:65:=<:20:>=>=><:64:x
<:6F:=<:77:>=>=><:6E:x<:20:=<:61:>=>=><:6E:x<:64:=<:20:>=>=><:70:x<:61:=<:73:>=>=>><:20:x
<:69:=<:74:>=>=><:20:x<:61:=<:72:>=>=><:6F:x<:75:=<:6E:>=>=><:64:~>}:_start:{~%><:1c:~
}:_99:~{~$>=<:01:x-^:_99:<:0D:~$@:20:{~%><:10:~}:_98:~{~$>=<:01:x-^:_98:<:0D:~$@:c:<:20:~
}:_97:~{~$>=<:01:x-^:_97:<:0D:~${x<:01:x->&==<:01:-#:_322:{~%><:1c:~}:_96:~{~$>=<:01:x-
^:_96:<:d:~$$@:20:{~>&^:_start:}:_90:?<:4E:x<:6F:=<:20:>=>=><:6D:x<:6F:=<:72:>=>=><:65:x
<:20:=<:62:>=>=><:6F:x<:74:=<:6C:>=>>=><:65:x<:73:=<:20:>=>=><:6F:x<:66:=<:20:>=>=><:62:x
<:65:=<:72:>=>>=><:20:x<:6F:=<:6E:>=>=><:20:x<:74:=<:68:>=>=><:65:x<:20:=<:77:>=>=><:61:x
<:6C:=>=>><:02:~}:_70:><:23:~}:_80:~{~$>=<:01:x-^:_80:{~<:01:=-#:_60:<:0D:~$$=^:_70:}:_60:
<:0D:~$<:17:~}:_81:~{~$=<:01:x-^:_81:<:0D:~$?<:47:x<:6F:=<:20:>=>=><:74:x<:6F:=<:20:>=>=>
<:74:x<:68:=<:65:>=>=><:20:x<:73:=<:74:>=>=><:6F:x<:72:=<:65:>=>=><:20:x<:61:=<:6E:>=>=>
<:64:x<:20:=<:62:>=>=><:75:x<:79:=<:20:>=>=><:73:x<:6F:=<:6D:>=>=><:65:x<:20:=<:6D:>=>=>
<:6F:x<:72:=<:65:>=>=><:21:~}:_18:~{~$=<:01:x-^:_18:<:0D:~$<:63:x<:20:=<:62:>=>=><:6F:x
<:74:=<:6C:>=>>=><:65:x<:73:=<:20:>=>=><:6F:x<:66:=<:20:>=>=><:62:x<:65:=<:72:>=>>=><:20:
x<:6F:=<:6E:>=>=><:20:x<:74:=<:68:>=>=><:65:x<:20:=<:77:>=>=><:61:x<:6C:=>=>>{~%<:1c:~
}:_21:~{~$=<:01:x-^:_21:<:0D:~$^:end:}:_322:?<:01:x<:20:=<:62:>=>=><:6F:x<:74:=<:6C:>=>>=
><:65:x<:20:=<:6F:>=>=><:66:x<:20:=>=><:62:x<:65:=<:72:>=>>=><:20:x<:6F:=<:6E:>=>=><:20:x
<:74:=<:68:>=>=><:65:x<:20:=<:77:>=>=><:61:x<:6C:=>=>><:54:x<:61:=<:6B:>=>=><:65:x<:20:=
<:6F:>=>=><:6E:x<:65:=<:20:>=>=><:64:x<:6F:=<:77:>=>=><:6E:x<:20:=<:61:>=>=><:6E:x<:64:=
<:20:>=>=><:70:x<:61:=<:73:>=>=>><:20:x<:69:=<:74:>=>=><:20:x<:61:=<:72:>=>=><:6F:x<:75:=
<:6E:>=>=><:64:~>{~%><:1b:~}:_299:~{~$>=<:01:x-^:_299:<:0D:~$$@:20:{~%><:1b:~}:_298:~{~$>
=<:01:x-^:_298:<:0D:~$@:20:{~%<:f:~}:_297:~{~$>=<:01:x-^:_297:<:0D:~$@:c:<:20:~}:_296:~{~
$>=<:01:x-^:_296:<:0D:~${x<:01:x->&==<:01:-^:_90:

--- Hello World Program ---

<:48:x<:65:=<:6C:$=$=$$~<:03:+$~<:ffffffffffffffbd:+$<:ffffffffffffffb1:
+$<:57:~$~<:18:x+$~<:03:+$~<:06:x-$x<:0e:x-$=x<:43:x-$


--- Cat Program ---

}:_t:!~$^:_t:


--- Odd Even Program ---

}:s:|=<:2:x~#:e:=/~%~<:20:~$=<:73:x<:69:~$~$~<:20:~$=^:o:<:65:
x<:76:=$=$~$<:6E:~$<:a:~$^:s:}:o:<:6F:x<:64:x~$~$$<:a:~$^:s:


--- Binary Program ---

|~}:z:=x<:2:x/=>&~^:z:
<:ffffffffffffffff:~>}:s:{x
<:ffffffffffffffff:
-#:out:=%~^:s:


--- Factorial Program ---

<:1:~%<:d:~$~>~}:s:><:1:x{+>~{*%
<:21C3677C82B40000:=-#:end:~<:d:~$=^:s:


--- Arithmetic Program ---

<:01:~><:02:~><:03:~><:04:~><:05:~><:06:~><:07:~><:08:~><:09:~>
<:0a:~><:0b:~><:0c:~><:0d:~><:0e:~><:0f:~><:10:~><:11:~><:12:~>
<:13:~><:14:~><:15:~><:16:~><:17:~><:18:~><:19:~><:ffffffffffffffff:~>
{x{+>}:8f:{&={+>{~>&=x<:ffffffffffffffff:/#:8f:{{=<:19:x/%


--- Fibonacci Program ---

%<:0D:>~$<:01:~%>=<:a94fad42221f2702:>~>}:_s:{x{={~$x+%{=>~>x~-x<:0D:~>~>~^:_s:?


--- Prime Program ---

<:2:~}:strt:>~}:net:<:1:x-~<:1:x-#:ok:x{=>=>=/=#:nP:{x
^:net:}:ok:{~%<:d:~$<:1:+^:strt:}:nP:{{x<:1:+^:strt:


--- Hailstone Program ---

|~}:s:%~<:1:-#:end:
<:d:~$~>{>x<:2:x/=
#:evn:{x<:3:*~<:1:+
^:s:}:evn:~{^:s:


--- Sum of Squares Program ---

{x{*%<:d:~$<:1:~>><:2:~>><:3:~>><:4:~>><:5:~>><:6:~>><:7:
~>><:8:~>><:9:~>><:a:~>><:b:~>><:c:~>><:ffffffffffffffff:
~>{x{*>}:8f:{x{*&{=+>{~>&=x<:ffffffffffffffff:/#:8f:{{~%


--- 99bb Program ---
<:63:x<:20:=<:62:>=>=><:6F:x<:74:=<:6C:>=>>=><:65:x<:73:=<:20:>=>=><:6F:x<:66:=<:20:>=>=>
<:62:x<:65:=<:72:>=>>=><:20:x<:6F:=<:6E:>=>=><:20:x<:74:=<:68:>=>=><:65:x<:20:=<:77:>=>=>
<:61:x<:6C:=>=>><:54:x<:61:=<:6B:>=>=><:65:x<:20:=<:6F:>=>=><:6E:x<:65:=<:20:>=>=><:64:x
<:6F:=<:77:>=>=><:6E:x<:20:=<:61:>=>=><:6E:x<:64:=<:20:>=>=><:70:x<:61:=<:73:>=>=>><:20:x
<:69:=<:74:>=>=><:20:x<:61:=<:72:>=>=><:6F:x<:75:=<:6E:>=>=><:64:~>}:_start:{~%><:1c:~
}:_99:~{~$>=<:01:x-^:_99:<:0D:~$@:20:{~%><:10:~}:_98:~{~$>=<:01:x-^:_98:<:0D:~$@:c:<:20:~
}:_97:~{~$>=<:01:x-^:_97:<:0D:~${x<:01:x->&==<:01:-#:_322:{~%><:1c:~}:_96:~{~$>=<:01:x-
^:_96:<:d:~$$@:20:{~>&^:_start:}:_90:?<:4E:x<:6F:=<:20:>=>=><:6D:x<:6F:=<:72:>=>=><:65:x
<:20:=<:62:>=>=><:6F:x<:74:=<:6C:>=>>=><:65:x<:73:=<:20:>=>=><:6F:x<:66:=<:20:>=>=><:62:x
<:65:=<:72:>=>>=><:20:x<:6F:=<:6E:>=>=><:20:x<:74:=<:68:>=>=><:65:x<:20:=<:77:>=>=><:61:x
<:6C:=>=>><:02:~}:_70:><:23:~}:_80:~{~$>=<:01:x-^:_80:{~<:01:=-#:_60:<:0D:~$$=^:_70:}:_60:
<:0D:~$<:17:~}:_81:~{~$=<:01:x-^:_81:<:0D:~$?<:47:x<:6F:=<:20:>=>=><:74:x<:6F:=<:20:>=>=>
<:74:x<:68:=<:65:>=>=><:20:x<:73:=<:74:>=>=><:6F:x<:72:=<:65:>=>=><:20:x<:61:=<:6E:>=>=>
<:64:x<:20:=<:62:>=>=><:75:x<:79:=<:20:>=>=><:73:x<:6F:=<:6D:>=>=><:65:x<:20:=<:6D:>=>=>
<:6F:x<:72:=<:65:>=>=><:21:~}:_18:~{~$=<:01:x-^:_18:<:0D:~$<:63:x<:20:=<:62:>=>=><:6F:x
<:74:=<:6C:>=>>=><:65:x<:73:=<:20:>=>=><:6F:x<:66:=<:20:>=>=><:62:x<:65:=<:72:>=>>=><:20:
x<:6F:=<:6E:>=>=><:20:x<:74:=<:68:>=>=><:65:x<:20:=<:77:>=>=><:61:x<:6C:=>=>>{~%<:1c:~
}:_21:~{~$=<:01:x-^:_21:<:0D:~$^:end:}:_322:?<:01:x<:20:=<:62:>=>=><:6F:x<:74:=<:6C:>=>>=
><:65:x<:20:=<:6F:>=>=><:66:x<:20:=>=><:62:x<:65:=<:72:>=>>=><:20:x<:6F:=<:6E:>=>=><:20:x
<:74:=<:68:>=>=><:65:x<:20:=<:77:>=>=><:61:x<:6C:=>=>><:54:x<:61:=<:6B:>=>=><:65:x<:20:=
<:6F:>=>=><:6E:x<:65:=<:20:>=>=><:64:x<:6F:=<:77:>=>=><:6E:x<:20:=<:61:>=>=><:6E:x<:64:=
<:20:>=>=><:70:x<:61:=<:73:>=>=>><:20:x<:69:=<:74:>=>=><:20:x<:61:=<:72:>=>=><:6F:x<:75:=
<:6E:>=>=><:64:~>{~%><:1b:~}:_299:~{~$>=<:01:x-^:_299:<:0D:~$$@:20:{~%><:1b:~}:_298:~{~$>
=<:01:x-^:_298:<:0D:~$@:20:{~%<:f:~}:_297:~{~$>=<:01:x-^:_297:<:0D:~$@:c:<:20:~}:_296:~{~
$>=<:01:x-^:_296:<:0D:~${x<:01:x->&==<:01:-^:_90:
